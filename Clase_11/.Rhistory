install.packages("Adonis")
# Data
data(dune)
library(vegan) # 	Community Ecology Package: Ordination, Diversity and Dissimilarities
# Data
data(dune)
data(dune.env)
View(dune)
# Data dune meadow vegetation
data(dune)
data(dune.env)
View(dune.env)
summary(dune.env)
permanova <- adonis(dune ~ Management, data=dune.env, permutations=999)
permanova
library(pairwiseAdonis)
install.packages("pairwiseAdonis")
detach("package:vegan", unload = TRUE)
bioenvpca <- prcomp(dune, scale = TRUE)
bioenvpca
dunepca <- prcomp(dune, scale = TRUE)
dunevpca
dunepca
# Obtenga la varianza explicada por cada CP con la función **get_eigenvalue**
# y grafique con la función **fviz_eig**.
get_eigenvalue(dunepca)
library(factoextra)
# Obtenga la varianza explicada por cada CP con la función **get_eigenvalue**
# y grafique con la función **fviz_eig**.
get_eigenvalue(dunepca)
fviz_eig(dunepca)
fviz_pca_ind(dunepca, repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_var(dunepca)
fviz_pca_biplot(dunepca, repel = TRUE)
fviz_pca_ind(dunepca, repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE) # evita que se solape el nombre de los sitios
habillage = dune.env$Management, # color by groups
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07", "#FFDB6D"),
repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07", "#FFDB6D"),
addEllipses = TRUE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_var(dunepca)
fviz_pca_biplot(dunepca, repel = TRUE)
# Compute k-means with k = 4
cluster_kmeans <- kmeans(scale(dune), 4, nstart = 25)
# K-means clusters showing the group of each individuals
cluster_kmeans$cluster
fviz_cluster(cluster_kmeans, data = dune,
palette = c("#2E9FDF", "#00AFBB", "#E7B800","#FFDB6D"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
fviz_eig(dunepca)
# Obtenga la varianza explicada por cada CP con la función **get_eigenvalue**
# y grafique con la función **fviz_eig**.
get_eigenvalue(dunepca)
dunepca
# Elabore gráficas para representar la distribución de los sitios **fviz_pca_ind()**,
# de las variables **fviz_pca_var()** y gráficas Biplot **fviz_pca_biplot()**
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07", "#FFDB6D"),
addEllipses = TRUE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_var(dunepca)
fviz_pca_biplot(dunepca, repel = TRUE)
# Elabore gráficas para representar la distribución de los sitios **fviz_pca_ind()**,
# de las variables **fviz_pca_var()** y gráficas Biplot **fviz_pca_biplot()**
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07", "#FFDB6D"),
addEllipses = FALSE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
# Elabore gráficas para representar la distribución de los sitios **fviz_pca_ind()**,
# de las variables **fviz_pca_var()** y gráficas Biplot **fviz_pca_biplot()**
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07", "#2E9FDF"),
addEllipses = FALSE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Management, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07", "#2E9FDF"),
addEllipses = TRUE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_var(dunepca)
permanova
View(dunepca)
dunepca
View(dune)
View(dune.env)
View(dune)
plot<-cbind(rawnames(dune), PCA1, PCA2, dune.env$Managemen)
plot<-cbind(rownames(dune), PCA1, PCA2, dune.env$Managemen)
PCA1 <- dunepca$x[,1]
PCA2 <- dunepca$x[,2]
plot<-cbind(rownames(dune), PCA1, PCA2, dune.env$Managemen)
View(plot)
plot<-cbind(rownames(dune), PCA1, PCA2, dune.env$Management)
View(plot)
colnames(plot) <- c("dune", "PCA1", "PCA2", "Management"))
colnames(plot) <- c("dune", "PCA1", "PCA2", "Management")
View(plot)
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, color=Management))+
geom_point(position=position_jitter(.1), shape=3)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
plot<-as.data.frame(plot)
View(plot)
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, color=Management))+
geom_point(position=position_jitter(.1), shape=3)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, color=Management))+
geom_point(position=position_jitter(.1))+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, color=Management))+
geom_point()+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(color=Management)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management))+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 4)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
colnames(plot) <- c("dune", "PCA1", "PCA2", "Management")
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 3)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 2)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 2)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()+
xlim(-1, 2)
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 2)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()+
xlim(-1.0, 2.0)
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 2)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p + scale_x_continuous(limits = c(-1, 2))
View(plot)
PCA1 <- as.numeric(dunepca$x[,1])
PCA2 <- as.numeric(dunepca$x[,2])
plot<-cbind(rownames(dune), PCA1, PCA2, dune.env$Management)
colnames(plot) <- c("dune", "PCA1", "PCA2", "Management")
plot<-as.data.frame(plot)
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 2)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p + scale_x_continuous(limits = c(-1, 2))
p
View(plot)
plot<-as.data.frame(plot)
plot$PCA1 <- as.numeric(plot$PCA1)
plot$PCA2 <- as.numeric(plot$PCA2)
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 2)+##separates overlapping points
stat_ellipse(type='t',size =1)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
#plot ordination
p<-ggplot(plot, aes(PCA1, PCA2, shape=Management))+
geom_point(aes(color=Management), size = 2)+##separates overlapping points
stat_ellipse(type='t',size =0.5)+ ##draws 95% confidence interval ellipses
theme_minimal()
p
View(dune.env)
summary(dune.env)
permanova <- adonis(dune ~ Use, method = "bray", data=dune.env, permutations=999)
library(readxl)
library(dplyr)
library(ggplot2)
library(vegan) # 	Community Ecology Package: Ordination, Diversity and Dissimilarities
library(factoextra)
permanova <- adonis(dune ~ Use, method = "bray", data=dune.env, permutations=999)
permanova
# Realice un análisis de componentes principales.
dunepca <- prcomp(dune, scale = TRUE)
dunepca
# Obtenga la varianza explicada por cada CP con la función **get_eigenvalue**
# y grafique con la función **fviz_eig**.
get_eigenvalue(dunepca)
fviz_eig(dunepca)
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Use, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = FALSE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
fviz_pca_ind(dunepca,
label = "none", # hide individual labels
habillage = dune.env$Use, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
# **Ejercicio 2.** Importar y explorar
bioenv <- read_excel("bioenv.xlsx", sheet = 1)
summary(bioenv)
bioenv$Sitio <- as.factor(bioenv$Sitio)
bioenv$Sediment <- as.factor(bioenv$Sediment)
str(bioenv)
bioenv_new <- as.data.frame(bioenv[,2:6])
View(bioenv_new)
row.names(bioenv_new) <- bioenv$Sitio
head(bioenv_new)
# PERMANOVA
permanova_2 <- adonis(bioenv_new ~ Sediment, method = "bray", data=bioenv_new, permutations=999)
# PERMANOVA
permanova_2 <- adonis(bioenv_new ~ Sediment, method = "bray", data=bioenv, permutations=999)
permanova_2
bioenvpca <- prcomp(bioenv_new, scale = TRUE)
# Gráfica
fviz_pca_ind(bioenvpca,
label = "none", # hide individual labels
habillage = bioenv$Sediment, # color by groups
palette = c("#00AFBB", "#E7B800", "#2E9FDF"),
addEllipses = FALSE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
# Gráfica
fviz_pca_ind(bioenvpca,
label = "none", # hide individual labels
habillage = bioenv$Sediment, # color by groups
palette = c("#00AFBB", "#E7B800", "#2E9FDF"),
addEllipses = TRUE, # Concentration ellipses
repel = TRUE) # evita que se solape el nombre de los sitios
# PERMANOVA
permanova_2 <- adonis(bioenv_new ~ Sediment, method = "bray", data=bioenv, permutations=5000)
permanova_2
# PERMANOVA
permanova_2 <- adonis(bioenv_new ~ Sediment, method = "bray", data=bioenv, permutations=50000)
permanova_2
